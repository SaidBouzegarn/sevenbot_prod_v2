AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy SevenBots App with Auto Scaling Group

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
  VpcCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: CIDR block for the VPC
  PublicSubnet1Cidr:
    Type: String
    Default: '10.0.1.0/24'
    Description: CIDR block for public subnet 1
  PublicSubnet2Cidr:
    Type: String
    Default: '10.0.2.0/24'
    Description: CIDR block for public subnet 2
  AmiId:
    Type: AWS::EC2::Image::Id
    Default: 'ami-07db896e164bc4476'
    Description: 'AMI ID for SevenBots instances'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: SevenBotsVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: SevenBotsIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SevenBotsPublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SevenBotsPublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: SevenBotsPublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  SevenBotsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 #we should restrict this to our some ips if app to stay private
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  # Add EFS Security Group
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS mount targets
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref SevenBotsSecurityGroup
      Tags:
        - Key: Name
          Value: SevenBotsEFSSecurityGroup

  # Create EFS File System
  SevenBotsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: maxIO
      ThroughputMode: bursting


  # Create Mount Targets in each subnet
  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref SevenBotsFileSystem
      SubnetId: !Ref PublicSubnet1
      SecurityGroups:
        - !Ref EFSSecurityGroup

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref SevenBotsFileSystem
      SubnetId: !Ref PublicSubnet2
      SecurityGroups:
        - !Ref EFSSecurityGroup

  SevenBotsLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: 
      - MountTarget1
      - MountTarget2
    Properties:
      LaunchTemplateName: SevenBotsLaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: t3.xlarge
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref SevenBotsSecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt SevenBotsInstanceProfile.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e
            
            # Configure apt for faster downloads
            echo 'Acquire::http::Pipeline-Depth "5";' >> /etc/apt/apt.conf.d/99parallel-downloads
            echo 'Acquire::http::Parallel-Queue-Size "5";' >> /etc/apt/apt.conf.d/99parallel-downloads
            
            # Update and install base packages with optimized settings
            apt-get update
            DEBIAN_FRONTEND=noninteractive apt-get install -y \
              python3-pip python3-venv unzip wget git nfs-common aria2

            # Install AWS CLI using aria2 for faster download
            aria2c "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install
            rm -rf aws awscliv2.zip

            # Wait for EFS mount targets to be available
            echo "Waiting for EFS mount targets to be available..."
            aws efs describe-mount-targets --file-system-id ${SevenBotsFileSystem} --region ${AWS::Region} \
              --query 'MountTargets[*].LifeCycleState' --output text | grep -q "available"
            while [ $? -ne 0 ]; do
              sleep 10
              aws efs describe-mount-targets --file-system-id ${SevenBotsFileSystem} --region ${AWS::Region} \
                --query 'MountTargets[*].LifeCycleState' --output text | grep -q "available"
            done
            echo "EFS mount targets are available"

            # Mount EFS
            mkdir -p /data
            echo "${SevenBotsFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /data nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,noatime 0 0" >> /etc/fstab
            mount -a

            # Setup application directory
            cd /data
            if [ ! -d "SEVENBOT_PROD" ] || [ -z "$(ls -A SEVENBOT_PROD)" ]; then
                mkdir -p SEVENBOT_PROD
                cd SEVENBOT_PROD
                aws s3 cp s3://sevenbluebots/sevenbluebots.zip . --quiet
                unzip -q sevenbluebots.zip
                rm sevenbluebots.zip
                # Add full read/write/execute permissions for the entire app directory
                chmod -R 777 /data/SEVENBOT_PROD
            else
                cd SEVENBOT_PROD
                # Ensure permissions are set even for existing installation
                chmod -R 777 /data/SEVENBOT_PROD
            fi

            # Optimize pip installations
            python3 -m venv venv
            source venv/bin/activate
            pip install --no-cache-dir --upgrade pip
            pip install --no-cache-dir -r requirements.txt

            # Install Playwright and dependencies
            pip install --no-cache-dir playwright
            playwright install --with-deps chromium
            
            # Install Playwright system dependencies efficiently
            DEBIAN_FRONTEND=noninteractive apt-get install -y \
                libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 \
                libcups2 libdrm2 libxkbcommon0 libxcomposite1 \
                libxdamage1 libxfixes3 libxrandr2 libgbm1 libasound2

            # Create systemd service for Streamlit
            cat > /etc/systemd/system/streamlit.service << EOF
            [Unit]
            Description=Streamlit Application
            After=network.target

            [Service]
            User=root
            WorkingDirectory=/data/SEVENBOT_PROD/app
            Environment=PATH=/data/SEVENBOT_PROD/venv/bin
            ExecStart=/data/SEVENBOT_PROD/venv/bin/streamlit run Home.py --server.port 8501 --server.address 0.0.0.0
            Restart=always

            [Install]
            WantedBy=multi-user.target
            EOF

            # Start and enable Streamlit service
            systemctl daemon-reload
            systemctl start streamlit
            systemctl enable streamlit

            # Setup CloudWatch Logging
            # Install CloudWatch agent
            wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
            sudo dpkg -i amazon-cloudwatch-agent.deb
            rm amazon-cloudwatch-agent.deb
            
            # Configure CloudWatch agent
            cat > /opt/aws/amazon-cloudwatch-agent/bin/config.json << EOF
            {
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/syslog",
                        "log_group_name": "/sevenbots/system",
                        "log_stream_name": "{instance_id}/system-logs"
                      },
                      {
                        "file_path": "/var/log/streamlit.log",
                        "log_group_name": "/sevenbots/application",
                        "log_stream_name": "{instance_id}/streamlit"
                      },
                      {
                        "file_path": "/var/log/cloud-init-output.log",
                        "log_group_name": "/sevenbots/deployment",
                        "log_stream_name": "{instance_id}/user-data"
                      }
                    ]
                  }
                }
              }
            }
            EOF

            # Start CloudWatch agent
            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json
            sudo systemctl start amazon-cloudwatch-agent
            sudo systemctl enable amazon-cloudwatch-agent

  SevenBotsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: sevenbots-target-group
      Port: 8501
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      TargetType: instance
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 86400  # 24 hours, adjust as needed

  SevenBotsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
      LaunchTemplate:
        LaunchTemplateId: !Ref SevenBotsLaunchTemplate
        Version: !GetAtt SevenBotsLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref SevenBotsTargetGroup

  SevenBotsLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: sevenbots-load-balancer
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SevenBotsSecurityGroup
      Scheme: internet-facing
      Type: application

  SevenBotsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref SevenBotsLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SevenBotsTargetGroup

  SevenBotsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:GetObjectAttributes
                  - s3:GetObjectTagging
                  - s3:PutObjectTagging
                  - s3:GetObjectVersion
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                  - s3:CreateMultipartUpload
                Resource: 
                  - arn:aws:s3:::sevenbluebots/*
                  - arn:aws:s3:::sevenbluebots
        - PolicyName: SNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:Subscribe
                  - sns:CreateTopic
                  - sns:ListTopics
                  - sns:GetTopicAttributes
                  - sns:SetTopicAttributes
                Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/sevenbots/*:*"
        - PolicyName: VolumeManagementPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AttachVolume
                  - ec2:DetachVolume
                  - ec2:DescribeVolumes
                  - ec2:DescribeVolumeStatus
                  - ec2:DescribeVolumeAttribute
                Resource: '*'
        - PolicyName: EFSAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                  - elasticfilesystem:DescribeMountTargets
                  - elasticfilesystem:DescribeFileSystems
                  - elasticfilesystem:DescribeAccessPoints
                  - elasticfilesystem:CreateAccessPoint
                  - elasticfilesystem:DeleteAccessPoint
                Resource: 
                  - !Sub "arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${SevenBotsFileSystem}"
                  - !Sub "arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/*"
              - Effect: Allow
                Action:
                  - elasticfilesystem:DescribeMountTargets
                  - elasticfilesystem:DescribeFileSystems
                Resource: "*"

  SevenBotsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref SevenBotsInstanceRole

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceType: VPC
      ResourceId: !Ref VPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Sub '/aws/vpc/flowlogs/${AWS::StackName}'
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogRole.Arn

  VPCFlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: flowlogs-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutRetentionPolicy
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/vpc/flowlogs/${AWS::StackName}:*'

  VPCFlowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/vpc/flowlogs/${AWS::StackName}'
      RetentionInDays: 14  # Adjust retention as needed

Outputs:
  LoadBalancerDNSName:
    Description: "DNS name of the load balancer"
    Value: !GetAtt SevenBotsLoadBalancer.DNSName